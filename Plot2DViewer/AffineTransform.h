#ifndef AFFINE_TRANSFORM_H
#define AFFINE_TRANSFORM_H

Matrix<> Translation(double x = 0, double y = 0) {
	double T[9] = {
		1, 0, x,
		0, 1, y,
		0, 0, 1};
	return Matrix<>(3, 3, T);
}
Matrix<> Rotation(double t) { // - поворот на угол t вокруг начала координат против часовой стелки
	double T[9] = {
		cos(t), -sin(t), 0,
		sin(t), cos(t), 0,
		0, 0, 1 };
	return Matrix<>(3, 3, T);
}
Matrix<> Rotation(double c, double s) { // - поворот на угол, косинус и синус которого пропорциональны величинам c и s
	double len = sqrt(c * c + s * s);
	double a = c / len, b = s / len;
	double T[9] = {
		a, -b, 0,
		b, a, 0,
		0, 0, 1 };
	return Matrix<>(3, 3, T);
}
Matrix<> Scaling(double kx = 1, double ky = 1) { // - масштабирование вдоль ОК с коэфицциентами kx и ky;
	double T[9] = {
		kx, 0, 0,
		0, ky, 0,
		0, 0, 1 };
	return Matrix<>(3, 3, T);
}

// Здесь требуется реализовать функции, возвращающие матрицы базовых АП:
// Identity() - тождественное АП;
// Rotation(t) - поворот на угол t вокруг начала координат против часовой стелки;
// Rotation(c, s) - поворот на угол, косинус и синус которого пропорциональны величинам c и s;
// Scaling(kx, ky) - масштабирование;
// Mapping (различные виды отражений) - по желанию, для создания матриц отражения можно использовать функцию Scaling.

// В приведённом примере используется конструктор матрицы из списка.
// Приветствуются идеи о других способах создания матриц.
// Например, вызов функции, создающей единичную матрицу,
// с последующим переопределением некоторых её коэффициентов.

#endif AFFINE_TRANSFORM_H
